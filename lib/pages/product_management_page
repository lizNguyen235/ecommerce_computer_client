import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class Product {
  final String id;
  final String name;
  final int price;
  final String imageUrl;
  final String shortDesc;
  final bool isPromo;

  Product({
    required this.id,
    required this.name,
    required this.price,
    required this.imageUrl,
    required this.shortDesc,
    this.isPromo = false,
  });
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Quản lý Sản phẩm',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: ProductManagementPage(),
    );
  }
}

class ProductManagementPage extends StatefulWidget {
  @override
  State<ProductManagementPage> createState() => _ProductManagementPageState();
}

class _ProductManagementPageState extends State<ProductManagementPage> {
  List<Product> _products = List.generate(
    20,
    (index) => Product(
      id: '$index',
      name: 'Sản phẩm $index',
      price: (index + 1) * 100000,
      imageUrl: 'https://via.placeholder.com/120',
      shortDesc: 'Mô tả ngắn cho sản phẩm số $index. Có thể mô tả tối đa 2 dòng.',
      isPromo: index % 5 == 0,
    ),
  );
  final ScrollController _scrollController = ScrollController();
  bool _isLoadingMore = false;
  int _currentPage = 1;
  final int _pageSize = 20;

  @override
  void initState() {
    super.initState();
    _scrollController.addListener(_onScroll);
  }

  void _onScroll() {
    if (_scrollController.position.pixels >= _scrollController.position.maxScrollExtent - 200 && !_isLoadingMore) {
      _loadMoreProducts();
    }
  }

  Future<void> _loadMoreProducts() async {
    setState(() => _isLoadingMore = true);
    await Future.delayed(const Duration(seconds: 1));
    setState(() {
      _products.addAll(List.generate(_pageSize, (index) {
        int idx = _products.length + index;
        return Product(
          id: '$idx',
          name: 'Sản phẩm $idx',
          price: (idx + 1) * 100000,
          imageUrl: 'https://via.placeholder.com/120',
          shortDesc: 'Mô tả ngắn cho sản phẩm số $idx. Có thể mô tả tối đa 2 dòng.',
          isPromo: idx % 5 == 0,
        );
      }));
      _currentPage++;
      _isLoadingMore = false;
    });
  }

  void _addProduct() {
    // Logic thêm sản phẩm mới (show dialog, v.v.)
  }

  void _editProduct(Product product) {
    // Logic sửa sản phẩm (show dialog, v.v.)
  }

  void _deleteProduct(Product product) {
    setState(() {
      _products.removeWhere((p) => p.id == product.id);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Quản lý Sản phẩm'),
        actions: [
          IconButton(
            icon: Icon(Icons.add),
            tooltip: 'Thêm sản phẩm',
            onPressed: _addProduct,
          ),
        ],
      ),
      body: ListView.builder(
        controller: _scrollController,
        itemCount: _products.length + (_isLoadingMore ? 1 : 0),
        itemBuilder: (context, index) {
          if (index >= _products.length) {
            return const Padding(
              padding: EdgeInsets.all(16),
              child: Center(child: CircularProgressIndicator()),
            );
          }
          final product = _products[index];
          return Card(
            margin: const EdgeInsets.symmetric(vertical: 6, horizontal: 12),
            child: ListTile(
              leading: Image.network(product.imageUrl, width: 60, height: 60, fit: BoxFit.cover),
              title: Row(
                children: [
                  Text(product.name, style: TextStyle(fontWeight: FontWeight.bold)),
                  if (product.isPromo)
                    Padding(
                      padding: const EdgeInsets.only(left: 8.0),
                      child: Chip(
                        label: Text('Khuyến mãi', style: TextStyle(color: Colors.white, fontSize: 12)),
                        backgroundColor: Colors.redAccent,
                      ),
                    ),
                ],
              ),
              subtitle: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text('${product.price.toString().replaceAllMapped(RegExp(r'(\d)(?=(\d{3})+(?!\d))'), (m) => '${m[1]},')} VNĐ'),
                  SizedBox(height: 4),
                  Text(product.shortDesc, maxLines: 2, overflow: TextOverflow.ellipsis),
                ],
              ),
              trailing: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  IconButton(
                    icon: Icon(Icons.edit, color: Colors.blue),
                    tooltip: 'Sửa',
                    onPressed: () => _editProduct(product),
                  ),
                  IconButton(
                    icon: Icon(Icons.delete, color: Colors.red),
                    tooltip: 'Xóa',
                    onPressed: () => _deleteProduct(product),
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}
